// 'use client';
//
// import { useState, useEffect } from 'react';
// import styles from './Hero.module.css';
// import { Carousel } from 'react-responsive-carousel';
// import 'react-responsive-carousel/lib/styles/carousel.min.css';
// import ModalVideo from './ModalVideo';
// import Link from 'next/link';
// import { DEFAULT_SHOW_IMAGE } from '../utilities/config.js';
//
// import { AiFillYoutube } from 'react-icons/ai';
// import {
//   checkIfFavorite,
//   checkIfWatched,
//   addToFavorites,
//   addToWatched,
//   removeFromFavorites,
//   removeFromWatched,
// } from '../helpers/firebaseUtils';
//
// export default function Hero() {
//   const [movies, setMovies] = useState([]);
//   const [activeVideo, setActiveVideo] = useState(null);
//   const [videos, setVideos] = useState([]);
//
//   const closeModal = () => {
//     setActiveVideo(null);
//   };
//
//   const handleVideoClick = async (index) => {
//     setActiveVideo(null);
//
//     const movieId = movies[index].id;
//     const res = await fetch(
//       `${process.env.NEXT_PUBLIC_BASE_URL}/movie/${movieId}/videos?api_key=${process.env.NEXT_PUBLIC_API_KEY}`
//     );
//     const data = await res.json();
//
//     if (data.results && data.results.length > 0) {
//       setActiveVideo(data.results[0].key);
//     } else {
//       setActiveVideo(null);
//     }
//
//     setVideos(data.results);
//   };
//
//   useEffect(() => {
//     async function fetchMovies() {
//       const res = await fetch(
//         `${process.env.NEXT_PUBLIC_BASE_URL}/movie/popular?api_key=${process.env.NEXT_PUBLIC_API_KEY}`
//       );
//       const data = await res.json();
//       setMovies(data.results);
//     }
//
//     fetchMovies();
//   }, []);
//
//   const handleAddToFavorites = (index) => {
//     const movie = movies[index]; // Pobierz dane filmu z listy
//     const show = movie.title;
//     const type = 'movie'; // Możesz dostosować to, jeśli będzie inny typ
//     const year = movie.release_date ? movie.release_date.split('-')[0] : 'Unknown'; // Pobierz rok z daty wydania
//     const vote = movie.vote_average && movie.vote_average.toFixed(1) !== '0.0' ? movie.vote_average.toFixed(1) : 'N/A';
//     const imageSrc = movie.poster_path ? `https://image.tmdb.org/t/p/w300${movie.poster_path}` : DEFAULT_SHOW_IMAGE;
//     const showId = movie.id;
//
//     // Dodaj do ulubionych za pomocą funkcji addToFavorites
//     addToFavorites(
//       movie,
//       type,
//       year,
//       vote,
//       imageSrc,
//       showId,
//       false,
//       () => {},
//       () => {}
//     );
//   };
//
//   if (movies.length === 0) {
//     return <div>Loading...</div>;
//   }
//
//   return (
//     <div className={styles.hero}>
//       <Carousel
//         autoPlay
//         infiniteLoop
//         interval={5000}
//         showThumbs={false}
//         showStatus={false}
//         showArrows={false}
//         swipeable={true}
//         dynamicHeight={false}
//         emulateTouch={true}
//       >
//         {movies.map((movie, index) => (
//           <div
//             key={movie.id}
//             className={styles.slide}
//             style={{
//               backgroundImage: `linear-gradient(to top, rgba(0,0,0,1) 5%,  rgba(0,0,0,0) ), url(https://image.tmdb.org/t/p/w1280${movie.backdrop_path})`,
//               backgroundSize: 'cover',
//             }}
//           >
//             <div className={styles.text_container}>
//               <Link href={`/movie/${movie.id}`}>
//                 <h1>{movie.title}</h1>
//                 <p>{movie.overview ? movie.overview : `We don't have an overview for ${movie.title} yet.`}</p>
//               </Link>
//               <div className={styles.buttons_container}>
//                 <span className={styles.btn_trailer_container}>
//                   <AiFillYoutube size={28} />
//                   <button className={`${styles.btn_trailer} ${styles.btn}`} onClick={() => handleVideoClick(index)}>
//                     TRAILER
//                   </button>
//                 </span>
//                 <button className={`${styles.btn_favorite} ${styles.btn}`} onClick={() => handleAddToFavorites(index)}>
//                   ADD TO FAVORITE
//                 </button>
//               </div>
//             </div>
//           </div>
//         ))}
//       </Carousel>
//
//       {activeVideo && <ModalVideo videos={activeVideo} closeModal={closeModal} />}
//     </div>
//   );
// }
//
//
//
//
// 'use client';
//
// import { useState, useEffect } from 'react';
// import ButtonHero from './ButtonHero';
// import styles from './Hero.module.css';
// import { Carousel } from 'react-responsive-carousel';
// import 'react-responsive-carousel/lib/styles/carousel.min.css';
// import ModalVideo from './ModalVideo';
// import Link from 'next/link';
// import { AiFillYoutube } from 'react-icons/ai';
//
// export default function Hero() {
//   const [movies, setMovies] = useState([]);
//   const [activeVideo, setActiveVideo] = useState(null);
//   const [videos, setVideos] = useState([]);
//
//   const closeModal = () => {
//     setActiveVideo(null);
//   };
//
//   const handleVideoClick = async (index) => {
//     setActiveVideo(null);
//
//     const movieId = movies[index].id;
//     const res = await fetch(
//       `${process.env.NEXT_PUBLIC_BASE_URL}/movie/${movieId}/videos?api_key=${process.env.NEXT_PUBLIC_API_KEY}`
//     );
//     const data = await res.json();
//
//     if (data.results && data.results.length > 0) {
//       setActiveVideo(data.results[0].key);
//     } else {
//       setActiveVideo(null);
//     }
//
//     setVideos(data.results);
//   };
//
//   useEffect(() => {
//     async function fetchMovies() {
//       const res = await fetch(
//         `${process.env.NEXT_PUBLIC_BASE_URL}/movie/popular?api_key=${process.env.NEXT_PUBLIC_API_KEY}`
//       );
//       const data = await res.json();
//       setMovies(data.results);
//     }
//
//     fetchMovies();
//   }, []);
//
//   if (movies.length === 0) {
//     return <div>Loading...</div>;
//   }
//
//   return (
//     <div className={styles.hero}>
//       <Carousel
//         autoPlay
//         infiniteLoop
//         interval={5000}
//         showThumbs={false}
//         showStatus={false}
//         showArrows={false}
//         swipeable={true}
//         dynamicHeight={false}
//         emulateTouch={true}
//       >
//         {movies.map((movie, index) => (
//           <div
//             key={movie.id}
//             className={styles.slide}
//             style={{
//               backgroundImage: `linear-gradient(to top, rgba(0,0,0,1) 5%,  rgba(0,0,0,0) ), url(https://image.tmdb.org/t/p/w1280${movie.backdrop_path})`,
//               backgroundSize: 'cover',
//             }}
//           >
//             <div className={styles.text_container}>
//               <Link href={`/movie/${movie.id}`}>
//                 <h1>{movie.title}</h1>
//                 <p>{movie.overview ? movie.overview : `We don't have an overview for ${movie.title} yet.`}</p>
//               </Link>
//               <div className={styles.buttons_container}>
//                 <span className={styles.btn_trailer_container}>
//                   <AiFillYoutube size={28} />
//                   <button className={`${styles.btn_trailer} ${styles.btn}`} onClick={() => handleVideoClick(index)}>
//                     TRAILER
//                   </button>
//                   {/* <ButtonHero onClick={() => handleVideoClick(index)}>Watch Trailer</ButtonHero> */}
//                 </span>
//                 {/* <Heart /> */}
//                 <button className={`${styles.btn_favorite} ${styles.btn}`}> ADD TO FAVORITE</button>
//                 {/* <ButtonHero additionalClass="btn_favorite">Add to favorite</ButtonHero> */}
//               </div>
//               {/* <ButtonHero additionalClass="btn_favorite">Add to favorite</ButtonHero> */}
//             </div>
//           </div>
//         ))}
//       </Carousel>
//
//       {activeVideo && <ModalVideo videos={activeVideo} closeModal={closeModal} />}
//     </div>
//   );
// }
//

// 'use client';
//
// import { useState, useEffect } from 'react';
// import styles from './Hero.module.css';
// import { Carousel } from 'react-responsive-carousel';
// import 'react-responsive-carousel/lib/styles/carousel.min.css';
// import ModalVideo from './ModalVideo';
// import Link from 'next/link';
// import { DEFAULT_SHOW_IMAGE } from '../utilities/config.js';
//
// import { AiFillYoutube } from 'react-icons/ai';
// import {
//   checkIfFavorite,
//   checkIfWatched,
//   addToFavorites,
//   addToWatched,
//   removeFromFavorites,
//   removeFromWatched,
// } from '../helpers/firebaseUtils';
//
// export default function Hero() {
//   const [movies, setMovies] = useState([]);
//   const [activeVideo, setActiveVideo] = useState(null);
//   const [videos, setVideos] = useState([]);
//
//   const closeModal = () => {
//     setActiveVideo(null);
//   };
//
//   const handleVideoClick = async (index) => {
//     setActiveVideo(null);
//
//     const movieId = movies[index].id;
//     const res = await fetch(
//       `${process.env.NEXT_PUBLIC_BASE_URL}/movie/${movieId}/videos?api_key=${process.env.NEXT_PUBLIC_API_KEY}`
//     );
//     const data = await res.json();
//
//     if (data.results && data.results.length > 0) {
//       setActiveVideo(data.results[0].key);
//     } else {
//       setActiveVideo(null);
//     }
//
//     setVideos(data.results);
//   };
//
//   useEffect(() => {
//     async function fetchMovies() {
//       const res = await fetch(
//         `${process.env.NEXT_PUBLIC_BASE_URL}/movie/popular?api_key=${process.env.NEXT_PUBLIC_API_KEY}`
//       );
//       const data = await res.json();
//       setMovies(data.results);
//     }
//
//     fetchMovies();
//   }, []);
//
//   const handleAddToFavorites = (index) => {
//     const movie = movies[index]; // Pobierz dane filmu z listy
//     const show = {
//       ...movie, // Tworzymy kopię obiektu movie
//       type: 'show', // Zamieniamy typ z "movie" na "show"
//       title: movie.title, // Nazwa programu (to nadal będzie tytuł filmu)
//       release_date: movie.release_date, // Rok wydania
//       vote_average: movie.vote_average, // Średnia ocen
//       poster_path: movie.poster_path, // Ścieżka do plakatu
//       id: movie.id, // ID programu (filmu w tym przypadku)
//     };
//
//     const year = show.release_date ? show.release_date.split('-')[0] : 'Unknown'; // Pobierz rok z daty wydania
//     const vote = show.vote_average && show.vote_average.toFixed(1) !== '0.0' ? show.vote_average.toFixed(1) : 'N/A';
//     const imageSrc = show.poster_path ? `https://image.tmdb.org/t/p/w300${show.poster_path}` : DEFAULT_SHOW_IMAGE;
//     const showId = show.id;
//
//     // Dodaj do ulubionych za pomocą funkcji addToFavorites
//     addToFavorites(
//       show, // Zmieniony obiekt show, który jest przekazywany jako "show"
//       'show', // Typ jako "show"
//       year,
//       vote,
//       imageSrc,
//       showId,
//       false,
//       () => {},
//       () => {}
//     );
//   };
//
//   if (movies.length === 0) {
//     return <div>Loading...</div>;
//   }
//
//   return (
//     <div className={styles.hero}>
//       <Carousel
//         autoPlay
//         infiniteLoop
//         interval={5000}
//         showThumbs={false}
//         showStatus={false}
//         showArrows={false}
//         swipeable={true}
//         dynamicHeight={false}
//         emulateTouch={true}
//       >
//         {movies.map((movie, index) => (
//           <div
//             key={movie.id}
//             className={styles.slide}
//             style={{
//               backgroundImage: `linear-gradient(to top, rgba(0,0,0,1) 5%,  rgba(0,0,0,0) ), url(https://image.tmdb.org/t/p/w1280${movie.backdrop_path})`,
//               backgroundSize: 'cover',
//             }}
//           >
//             <div className={styles.text_container}>
//               <Link href={`/movie/${movie.id}`}>
//                 <h1>{movie.title}</h1>
//                 <p>{movie.overview ? movie.overview : `We don't have an overview for ${movie.title} yet.`}</p>
//               </Link>
//               <div className={styles.buttons_container}>
//                 <span className={styles.btn_trailer_container}>
//                   <AiFillYoutube size={28} />
//                   <button className={`${styles.btn_trailer} ${styles.btn}`} onClick={() => handleVideoClick(index)}>
//                     TRAILER
//                   </button>
//                 </span>
//                 <button className={`${styles.btn_favorite} ${styles.btn}`} onClick={() => handleAddToFavorites(index)}>
//                   ADD TO FAVORITES
//                 </button>
//               </div>
//             </div>
//           </div>
//         ))}
//       </Carousel>
//
//       {activeVideo && <ModalVideo videos={activeVideo} closeModal={closeModal} />}
//     </div>
//   );
// }

'use client';

import { useState, useEffect } from 'react';
import styles from './Hero.module.css';
import { Carousel } from 'react-responsive-carousel';
import 'react-responsive-carousel/lib/styles/carousel.min.css';
import ModalVideo from './ModalVideo';
import Link from 'next/link';
import { AiFillYoutube } from 'react-icons/ai';
import { checkIfFavorite, addToFavorites, removeFromFavorites } from '../helpers/firebaseUtils';

export default function Hero() {
  const [movies, setMovies] = useState([]);
  const [activeVideo, setActiveVideo] = useState(null);
  const [videos, setVideos] = useState([]);
  const [isFavorite, setIsFavorite] = useState({});
  const [favoriteDocId, setFavoriteDocId] = useState({}); // Śledzenie ulubionych filmów

  const closeModal = () => {
    setActiveVideo(null);
  };

  const handleVideoClick = async (index) => {
    setActiveVideo(null);

    const movieId = movies[index].id;
    const res = await fetch(
      `${process.env.NEXT_PUBLIC_BASE_URL}/movie/${movieId}/videos?api_key=${process.env.NEXT_PUBLIC_API_KEY}`
    );
    const data = await res.json();

    if (data.results && data.results.length > 0) {
      setActiveVideo(data.results[0].key);
    } else {
      setActiveVideo(null);
    }

    setVideos(data.results);
  };

  useEffect(() => {
    async function fetchMovies() {
      const res = await fetch(
        `${process.env.NEXT_PUBLIC_BASE_URL}/movie/popular?api_key=${process.env.NEXT_PUBLIC_API_KEY}`
      );
      const data = await res.json();
      setMovies(data.results);

      // Sprawdzenie statusu ulubionych dla każdego filmu
      data.results.forEach((movie) => {
        checkIfFavorite(movie.id, (status, docId) => {
          setIsFavorite((prevState) => ({
            ...prevState,
            [movie.id]: status,
          }));
          setFavoriteDocId((prevState) => ({
            ...prevState,
            [movie.id]: docId,
          }));
        });
      });
    }

    fetchMovies();
  }, []);

  const handleAddToFavorites = (index) => {
    const movie = movies[index]; // Pobierz dane filmu
    const type = 'movie'; // Określ typ programu
    const year = movie.release_date ? movie.release_date.split('-')[0] : 'Unknown'; // Wyodrębnij rok
    const vote = movie.vote_average && movie.vote_average.toFixed(1) !== '0.0' ? movie.vote_average.toFixed(1) : 'N/A'; // Średnia ocen
    const imageSrc = movie.poster_path
      ? `https://image.tmdb.org/t/p/w300${movie.poster_path}`
      : '/path/to/default-image.jpg'; // Ścieżka do plakatu
    const showId = movie.id; // ID filmu

    // Dodanie do ulubionych
    addToFavorites(
      movie, // Dane filmu
      type, // Typ
      year, // Rok wydania
      vote, // Średnia ocen
      imageSrc, // Ścieżka do obrazu
      showId, // ID filmu
      isFavorite[movie.id], // Aktualny status ulubionych
      (status) => setIsFavorite((prevState) => ({ ...prevState, [movie.id]: status })), // Zaktualizuj status ulubionych
      (docId) => setFavoriteDocId((prevState) => ({ ...prevState, [movie.id]: docId })) // Zaktualizuj ID dokumentu
    );
  };

  if (movies.length === 0) {
    return <div>Loading...</div>;
  }

  return (
    <div className={styles.hero}>
      <Carousel
        autoPlay
        infiniteLoop
        interval={5000}
        showThumbs={false}
        showStatus={false}
        showArrows={false}
        swipeable={true}
        dynamicHeight={false}
        emulateTouch={true}
      >
        {movies.map((movie, index) => (
          <div
            key={movie.id}
            className={styles.slide}
            style={{
              backgroundImage: `linear-gradient(to top, rgba(0,0,0,1) 5%,  rgba(0,0,0,0) ), url(https://image.tmdb.org/t/p/w1280${movie.backdrop_path})`,
              backgroundSize: 'cover',
            }}
          >
            <div className={styles.text_container}>
              <Link href={`/movie/${movie.id}`}>
                <h1>{movie.title}</h1>
                <p>{movie.overview ? movie.overview : `We don't have an overview for ${movie.title} yet.`}</p>
              </Link>
              <div className={styles.buttons_container}>
                <span className={styles.btn_trailer_container}>
                  <AiFillYoutube size={28} />
                  <button className={`${styles.btn_trailer} ${styles.btn}`} onClick={() => handleVideoClick(index)}>
                    TRAILER
                  </button>
                </span>
                <button className={`${styles.btn_favorite} ${styles.btn}`} onClick={() => handleAddToFavorites(index)}>
                  {isFavorite[movie.id] ? 'REMOVE FROM FAVORITES' : 'ADD TO FAVORITES'}
                </button>
              </div>
            </div>
          </div>
        ))}
      </Carousel>

      {activeVideo && <ModalVideo videos={activeVideo} closeModal={closeModal} />}
    </div>
  );
}
